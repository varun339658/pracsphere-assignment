// File: apps/web/app/api/tasks/route.ts
import { NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
// Assuming 'authOptions' is imported correctly for your setup
import { authOptions } from "../auth/[...nextauth]/route"; 
import clientPromise from "../../../lib/mongodb";
import { ObjectId } from "mongodb";
import { v2 as cloudinary } from 'cloudinary';

// Configure Cloudinary with your credentials from .env.local
cloudinary.config({ 
Â  cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME, 
Â  api_key: process.env.CLOUDINARY_API_KEY,
Â  api_secret: process.env.CLOUDINARY_API_SECRET
});

// Helper function to upload an image file to Cloudinary
async function uploadImage(file: File) {
Â  const fileBuffer = await file.arrayBuffer();
Â  const mime = file.type;
Â  const encoding = 'base64';
Â  const base64Data = Buffer.from(fileBuffer).toString('base64');
Â  const fileUri = 'data:' + mime + ';' + encoding + ',' + base64Data;
Â  
Â  const result = await cloudinary.uploader.upload(fileUri, {
Â  Â  folder: 'pracsphere-tasks' // Organizes uploads in a specific folder in Cloudinary
Â  });
Â  return result.secure_url; // Return the public URL of the uploaded image
}

// --- API Route Handlers ---

// POST: Create a new task (Handles Priority)
export async function POST(request: Request) {
Â  const session = await getServerSession(authOptions);
Â  if (!session?.user?.email) {
Â  Â  return new NextResponse("Unauthorized", { status: 401 });
Â  }

Â  try {
Â  Â  const formData = await request.formData();
Â  Â  const title = formData.get('title') as string;
Â  Â  const description = formData.get('description') as string;
Â  Â  const dueDate = formData.get('dueDate') as string;
Â  Â  // ðŸ’¡ NEW: Extract priority field
Â  Â  const priority = formData.get('priority') as 'low' | 'medium' | 'high' || 'medium'; 
Â  Â  const images = formData.getAll('images') as File[];

Â  Â  if (!title || !description || !dueDate) {
Â  Â  Â  return new NextResponse("Missing required text fields (title, description, dueDate)", { status: 400 });
Â  Â  }

Â  Â  // Upload each valid image to Cloudinary and collect their URLs
Â  Â  const imageUrls: string[] = [];
Â  Â  for (const image of images) {
Â  Â  Â  if (image && image.size > 0) {
Â  Â  Â  Â  const imageUrl = await uploadImage(image);
Â  Â  Â  Â  imageUrls.push(imageUrl);
Â  Â  Â  }
Â  Â  }

Â  Â  const client = await clientPromise;
Â  Â  const db = client.db("pracsphere");
Â  Â  const result = await db.collection("tasks").insertOne({
Â  Â  Â  title,
Â  Â  Â  description,
Â  Â  Â  dueDate,
Â  Â  Â  images: imageUrls,
Â  Â  Â  status: "pending",
Â  Â  Â  priority, // ðŸ’¡ NEW: Save priority to the database
Â  Â  Â  userEmail: session.user.email,
Â  Â  });

Â  Â  return NextResponse.json(result, { status: 201 });
Â  } catch (error) {
Â  Â  console.error("TASK_CREATION_ERROR", error);
Â  Â  return new NextResponse("Internal Server Error", { status: 500 });
Â  }
}

// PUT: Full update for an existing task (Handles Priority)
export async function PUT(request: Request) {
Â  const session = await getServerSession(authOptions);
Â  if (!session?.user?.email) {
Â  Â  return new NextResponse("Unauthorized", { status: 401 });
Â  }

Â  try {
Â  Â  // The client sends the entire updated task object as JSON
Â  Â  // ðŸ’¡ UPDATED: Destructure priority from the request body
Â  Â  const { _id, title, description, dueDate, status, priority } = await request.json(); 

Â  Â  if (!_id || !title || !description || !dueDate || !status || !priority) {
Â  Â  Â  Â  return new NextResponse("Missing required fields for update", { status: 400 });
Â  Â  }

Â  Â  const client = await clientPromise;
Â  Â  const db = client.db("pracsphere");

Â  Â  const result = await db.collection("tasks").updateOne(
Â  Â  Â  Â  // Find the document by ID and ensure it belongs to the logged-in user
Â  Â  Â  Â  { _id: new ObjectId(_id), userEmail: session.user.email },
Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  $set: { 
Â  Â  Â  Â  Â  Â  Â  Â  title, 
Â  Â  Â  Â  Â  Â  Â  Â  description, 
Â  Â  Â  Â  Â  Â  Â  Â  dueDate, 
Â  Â  Â  Â  Â  Â  Â  Â  status,
                priority, // ðŸ’¡ NEW: Update the priority field
Â  Â  Â  Â  Â  Â  } 
Â  Â  Â  Â  }
Â  Â  );

Â  Â  if (result.matchedCount === 0) {
Â  Â  Â  Â  // Task not found or user doesn't have permission
Â  Â  Â  Â  return new NextResponse("Task not found or unauthorized to update", { status: 404 });
Â  Â  }

Â  Â  return NextResponse.json({ message: "Task updated successfully" }, { status: 200 });

Â  } catch (error) {
Â  Â  console.error("TASK_UPDATE_ERROR (PUT)", error);
Â  Â  return new NextResponse("Internal Server Error", { status: 500 });
Â  }
}

// GET: Fetch all tasks for the logged-in user (Unchanged)
export async function GET(request: Request) {
Â  const session = await getServerSession(authOptions);
Â  if (!session?.user?.email) {
Â  Â  return new NextResponse("Unauthorized", { status: 401 });
Â  }

Â  const client = await clientPromise;
Â  const db = client.db("pracsphere");
Â  // Sorting by dueDate: 1 (ascending/closest date first) is a good default
Â  const tasks = await db.collection("tasks").find({ userEmail: session.user.email }).sort({ dueDate: 1 }).toArray();

Â  return NextResponse.json(tasks);
}

// PATCH: Update a task's status (Unchanged)
export async function PATCH(request: Request) {
Â  Â  const session = await getServerSession(authOptions);
Â  Â  if (!session?.user?.email) {
Â  Â  Â  Â  return new NextResponse("Unauthorized", { status: 401 });
Â  Â  }

Â  Â  const { id, status } = await request.json();
Â  Â  if (!id || !status) {
Â  Â  Â  Â  return new NextResponse("Missing task ID or status", { status: 400 });
Â  Â  }

Â  Â  const client = await clientPromise;
Â  Â  const db = client.db("pracsphere");
Â  Â  await db.collection("tasks").updateOne(
Â  Â  Â  Â  { _id: new ObjectId(id), userEmail: session.user.email },
Â  Â  Â  Â  { $set: { status } }
Â  Â  );
Â  Â  
Â  Â  return NextResponse.json({ message: "Task updated" });
}

// DELETE: Delete a task (Unchanged)
export async function DELETE(request: Request) {
Â  const session = await getServerSession(authOptions);
Â  if (!session?.user?.email) {
Â  Â  return new NextResponse("Unauthorized", { status: 401 });
Â  }
Â  
Â  const { id } = await request.json();
Â  if (!id) {
Â  Â  return new NextResponse("Missing task ID", { status: 400 });
Â  }
Â  
Â  const client = await clientPromise;
Â  const db = client.db("pracsphere");
Â  await db.collection("tasks").deleteOne({ 
Â  Â  Â  _id: new ObjectId(id), 
Â  Â  Â  userEmail: session.user.email
Â  });

Â  return NextResponse.json({ message: "Task deleted" });
}